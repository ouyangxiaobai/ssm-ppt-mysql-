<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gx.dao.StayRegisterDao" >
  <resultMap id="BaseResultMap" type="com.gx.po.StayRegisterPo" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sun Oct 16 19:18:30 CST 2016.
    -->
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="predetermineID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="rentOutTypeID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="roomID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="payWayID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="billUnitID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="passengerTypeID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="receiveTargetID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="deputyID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="isBillID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="registerTime" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
      <arg column="stayNumber" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="sumConst" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="changingRoomNumber" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="changRoomMoney" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="remarks" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="payTime" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
      <arg column="changRoomTime" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
      <arg column="remind" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>

<!--   新增 -->
  <insert id="insertAll" useGeneratedKeys="true" keyProperty="id" parameterType="com.gx.po.StayRegisterPo" >
       INSERT INTO stayregister (roomID,rentOutTypeID,passengerTypeID,billUnitID,
     receiveTargetID,isBillID,registerTime,stayNumber,sumConst)
     values (#{roomID,jdbcType=INTEGER},
             #{rentOutTypeID,jdbcType=INTEGER},
             #{passengerTypeID,jdbcType=INTEGER},
             #{billUnitID,jdbcType=INTEGER},
             #{receiveTargetID,jdbcType=INTEGER},
             #{isBillID,jdbcType=INTEGER},
             #{registerTime,jdbcType=TIMESTAMP},
             #{stayNumber,jdbcType=VARCHAR},
             #{sumConst,jdbcType=DOUBLE})
  </insert>
  
<!--   查询全部 -->
  <!-- <select id="selectAll" resultType="com.gx.po.RoomSetPo" >
    SELECT r.*,a.attributeDetailsName AS guestRoomLevelName,b.attributeDetailsName AS roomName 
    FROM room r INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
    INNER JOIN attributedetails b ON r.roomStateID=b.id order by r.roomNumber ASC  
  </select> -->
  
  
  <!--   修改要用的精确查询 -->
   <select id="selectById" resultType="com.gx.po.StayRegisterPo" parameterType="java.lang.Integer">
     SELECT s.* FROM stayregister s where s.id=#{id,jdbcType=INTEGER}
   </select>
 
<!-- 新增住宿明细 -->
  <insert id="insertStayregisterdetails" >
       INSERT INTO stayregisterdetails (stayRegisterID,passengerID)
     values (#{stayRegisterID,jdbcType=INTEGER},
             #{passengerID,jdbcType=INTEGER})
  </insert>
  
<!-- 新增押金明细 -->
  <insert id="insertDeposit" parameterType="com.gx.po.StayRegisterPo">
       INSERT INTO depoit (stayRegisterID,payWayID,registerTime,deposit)
     values (#{depositStayRegisterID,jdbcType=INTEGER},
             #{depositPayWayID,jdbcType=INTEGER},
             #{depositRegisterTime,jdbcType=TIMESTAMP},
             #{deposit,jdbcType=DOUBLE})
  </insert>  
 
 
 <!-- 查询押金明细   -->
   <select id="selectDepositById" resultType="com.gx.po.StayRegisterPo" parameterType="java.lang.Integer">
      SELECT s.*,d.deposit,d.registerTime AS depositRegisterTime,a.attributeDetailsName AS depositPayWayName,
    rt.teamName AS receiveTeamName, ar.attributeDetailsName AS receiveTargeTypeName,
	r.roomNumber,b.attributeDetailsName AS rentOutTypeName,	c.attributeDetailsName AS billUnitName
	FROM stayregister s INNER JOIN depoit d ON s.id=d.stayRegisterID 
	INNER JOIN attributedetails a ON d.payWayID=a.id
	INNER JOIN receivetarget rt ON s.receiveTargetID=rt.id
	INNER JOIN attributedetails ar ON rt.targetTypeID=ar.id
	INNER JOIN room r ON s.roomID=r.id
	INNER JOIN attributedetails b ON s.rentOutTypeID=b.id
	INNER JOIN attributedetails c ON s.billUnitID=c.id
	where s.id=#{id,jdbcType=INTEGER}
   </select>
   
   
  <!-- 新增消费明细 -->
  <insert id="insertConsumptiondetails" parameterType="com.gx.po.StayRegisterPo">
       INSERT INTO consumptiondetails (stayRegisterID,commodityID,consumptionNumber,consumptionMoney,consumptionTime)
     values (#{consumptionStayRegisterID,jdbcType=INTEGER},
             #{consumptionCommodityID,jdbcType=INTEGER},
             #{consumptionNumber,jdbcType=VARCHAR},
             #{consumptionMoney,jdbcType=DOUBLE},
             #{consumptionTime,jdbcType=TIMESTAMP})
  </insert>
   
   
   <!-- 无条件的分页查询 消费明细 -->
   <select id="pageConsumption" resultType="com.gx.po.StayRegisterPo">
	  SELECT s.*,r.roomNumber,cpd.id AS consumptionId,cpd.consumptionNumber,cpd.consumptionMoney,
	cpd.consumptionTime,c.commodityName,c.salePrice AS commoditySalePrice,
	a.attributeDetailsName AS commodityUOMName
	FROM stayregister s INNER JOIN room r ON s.roomID=r.id
	LEFT OUTER JOIN consumptiondetails cpd ON s.id=cpd.stayRegisterID
	LEFT OUTER JOIN commodity c ON cpd.commodityID=c.id
	LEFT OUTER JOIN attributedetails a ON c.uOMID=a.id
	WHERE cpd.stayRegisterID=#{consumptionStayRegisterID,jdbcType=INTEGER}
	limit #{start},#{pageSize}
   </select>
   
   <!-- 无条件的分页查询 消费明细  查询总条数  -->
   <select id="countConsumption" resultType="java.lang.Integer">
	   SELECT count(*) FROM stayregister s INNER JOIN room r ON s.roomID=r.id
	LEFT OUTER JOIN consumptiondetails cpd ON s.id=cpd.stayRegisterID
	LEFT OUTER JOIN commodity c ON cpd.commodityID=c.id
	LEFT OUTER JOIN attributedetails a ON c.uOMID=a.id
	WHERE cpd.stayRegisterID=#{consumptionStayRegisterID,jdbcType=INTEGER}
   </select>
   
   <delete id="deleteConsumption" parameterType="java.lang.Integer">
      DELETE FROM consumptiondetails WHERE id = #{id,jdbcType=INTEGER}
   </delete>
 
   <!--  修改总费用 -->
   <update id="updateSumConst" >
     UPDATE stayregister SET sumConst=#{sumConst,jdbcType=DOUBLE}
     WHERE id = #{id,jdbcType=INTEGER}
   </update>
 
<!--    查询用于计算房间加商品消费 -->
   <select id="selectMoney" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,cpd.consumptionMoney,r.standardPriceDay AS roomStandardPriceDay,
	r.standardPrice AS roomStandardPrice,r.maxDuration AS roomMaxDuration,
	r.firstDuration AS roomFirstDuration,r.firstPrice AS roomFirstPrice
	FROM stayregister s LEFT OUTER JOIN consumptiondetails cpd ON s.id=cpd.stayRegisterID
	LEFT OUTER JOIN room r ON s.roomID=r.id
	WHERE s.id = #{id,jdbcType=INTEGER}
  </select>
   
 
 <!--    查询用于计算房间加商品消费 -->
   <select id="selectChangRoom" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.roomNumber,r.standardPriceDay AS roomStandardPriceDay,
	a.attributeDetailsName AS receiveTargeTypeName,d.deposit,
	ar.attributeDetailsName AS rentOutTypeName,
	rt.teamName AS receiveTeamName
	FROM stayregister s LEFT OUTER JOIN room r ON s.roomID=r.id
	LEFT OUTER JOIN attributedetails ar ON s.rentOutTypeID=ar.id
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id
	LEFT OUTER JOIN attributedetails a ON rt.targetTypeID=a.id
	LEFT OUTER JOIN depoit d ON d.stayRegisterID=s.id
	WHERE s.id = #{id,jdbcType=INTEGER}
  </select>
 
   <select id="selectAll" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber AS RoomNumber,a.attributeDetailsName AS RoomGuestRoomLevelName,
aa.attributeDetailsName AS predetermineReceiveTargeTypeName,ab.attributeDetailsName AS passengerTypeName
FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.isBillID=68
  </select>
  
  <select id="selectShuJuTongJi" resultType="com.gx.po.StayRegisterPo">
      SELECT s.* FROM stayregister s
    WHERE s.isBillID=69   and s.payTime BETWEEN #{min} AND #{max}
  </select>
 
 
 <!--  修改总费用 -->
   <update id="updateRemind" >
     UPDATE stayregister SET remind=#{remind,jdbcType=DOUBLE}
     WHERE id = #{id,jdbcType=INTEGER}
   </update>
 
 
 
 <!--  换房 -->
   <update id="updateChangRoom" parameterType="com.gx.po.StayRegisterPo">
     UPDATE stayregister SET roomID=#{roomID,jdbcType=INTEGER},
						     sumConst=#{sumConst,jdbcType=DOUBLE},
						     changingRoomNumber=#{changingRoomNumber,jdbcType=VARCHAR},
						     changRoomMoney=#{changRoomMoney,jdbcType=DOUBLE},
						     changRoomTime=#{changRoomTime,jdbcType=TIMESTAMP}
     WHERE id = #{id,jdbcType=INTEGER}
   </update>
   
   <!--  结账-->
   <update id="pay" >
     UPDATE stayregister SET remarks=#{remarks,jdbcType=VARCHAR},
						     payTime=#{payTime,jdbcType=TIMESTAMP},
						     payWayID=#{payWay,jdbcType=INTEGER},
						     isBillID=69
     WHERE id = #{id,jdbcType=INTEGER}
   </update>
   
   <!--   根据 团队id来查询 总费用， -->
   <select id="selectFormTeamId" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,COUNT(DISTINCT r.roomNumber),r.roomNumber,
    r.standardPriceDay AS roomStandardPriceDay,r.standardPrice AS roomStandardPrice,
    a.attributeDetailsName AS roomGuestRoomLevelName,
   	aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
	ab.attributeDetailsName AS passengerTypeName, rt.teamName AS receiveTeamName,
	rt.teamCode AS receiveTeamCode,rt.principal AS receivePrincipal,
	ac.attributeDetailsName AS rentOutTypeName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
	LEFT OUTER JOIN attributedetails ac ON s.rentOutTypeID=ac.id
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=#{isBillID,jdbcType=INTEGER} GROUP BY r.roomNumber
  </select>
  
  
   <select id="selectFormTeamIdTwo" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber,r.standardPriceDay AS roomStandardPriceDay,
        r.standardPrice AS roomStandardPrice, a.attributeDetailsName AS roomGuestRoomLevelName,
	aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
	ab.attributeDetailsName AS passengerTypeName, rt.teamName AS receiveTeamName,
	rt.teamCode AS receiveTeamCode,rt.principal AS receivePrincipal,
	ac.attributeDetailsName AS rentOutTypeName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
	LEFT OUTER JOIN attributedetails ac ON s.rentOutTypeID=ac.id 
    WHERE s.receiveTargetID!=2
    AND s.isBillID=#{isBillID,jdbcType=INTEGER} 
  </select>
  
  
  <!--   根据 团队id 来查询 押金， -->
   <select id="selectTeamDeposit" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.teamName AS receiveTeamName,d.deposit
	FROM stayregister s LEFT OUTER JOIN receivetarget r ON s.receiveTargetID=r.id
	LEFT OUTER JOIN depoit d ON s.id=d.stayRegisterID
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=68 
  </select>
  
  
  <!--   根据团队id 来查询 旅客消费， -->
   <select id="selectTeamConsumption" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.teamName AS receiveTeamName,c.consumptionMoney
	FROM stayregister s LEFT OUTER JOIN receivetarget r ON s.receiveTargetID=r.id
	LEFT OUTER JOIN consumptiondetails c ON s.id=c.stayRegisterID
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=68
  </select>
  
   <!--   Ajax 根据 团队id 的 房间号来查询， -->
   <select id="ajaxSelectTeamRoom" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber,r.standardPriceDay AS roomStandardPriceDay,
      r.standardPrice AS roomStandardPrice, a.attributeDetailsName AS roomGuestRoomLevelName,
	aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
	ab.attributeDetailsName AS passengerTypeName, rt.teamName AS receiveTeamName,
	rt.teamCode AS receiveTeamCode,rt.principal AS receivePrincipal,
	ac.attributeDetailsName AS rentOutTypeName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
	LEFT OUTER JOIN attributedetails ac ON s.rentOutTypeID=ac.id 
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=68 AND r.roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
  </select>
  
  
  
  
  
  
  
  
  <!--   Ajax 根据团队 id 和时间段来查询， -->
   <select id="ajaxSelectTeamFormTime" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,COUNT(DISTINCT r.roomNumber),r.roomNumber,
    r.standardPriceDay AS roomStandardPriceDay,r.standardPrice AS roomStandardPrice,
    a.attributeDetailsName AS roomGuestRoomLevelName,
   	aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
	ab.attributeDetailsName AS passengerTypeName, rt.teamName AS receiveTeamName,
	rt.teamCode AS receiveTeamCode,rt.principal AS receivePrincipal,
	ac.attributeDetailsName AS rentOutTypeName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
	LEFT OUTER JOIN attributedetails ac ON s.rentOutTypeID=ac.id
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=68 AND  s.registerTime BETWEEN #{min} AND #{max} GROUP BY r.roomNumber
  </select>
  
  
  <!--   根据 团队id 时间段来查询 押金， -->
   <select id="ajaxSelectTeamDeposit" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.teamName AS receiveTeamName,d.deposit
	FROM stayregister s LEFT OUTER JOIN receivetarget r ON s.receiveTargetID=r.id
	LEFT OUTER JOIN depoit d ON s.id=d.stayRegisterID
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=68 AND  s.registerTime BETWEEN #{min} AND #{max}
  </select>
  
  
  <!--   根据团队id 时间段来查询 旅客消费， -->
   <select id="ajaxSelectTeamConsumption" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.teamName AS receiveTeamName,c.consumptionMoney
	FROM stayregister s LEFT OUTER JOIN receivetarget r ON s.receiveTargetID=r.id
	LEFT OUTER JOIN consumptiondetails c ON s.id=c.stayRegisterID
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=68 AND  s.registerTime BETWEEN #{min} AND #{max}
  </select>
  
  
  
  
  
  
  <!--   根据 住宿登记id 来查询 详情信息  详情版 用于 转入团队， -->
   <select id="selectInformationXiangQingBan" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.roomNumber,r.standardPriceDay AS roomStandardPriceDay,
	r.standardPrice AS roomStandardPrice,r.firstPrice AS roomFirstPrice,
	rt.teamName AS receiveTeamName,p.name AS passengerName,
	sa.attributeDetailsName AS passengerTypeName,
	pa.attributeDetailsName AS passengerLevelName,sb.attributeDetailsName AS billUnitName,
	sc.attributeDetailsName AS rentOutTypeName,sd.attributeDetailsName AS payWayName
	FROM stayregister s LEFT OUTER JOIN room r ON s.roomID=r.id
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id
	LEFT OUTER JOIN stayregisterdetails st ON st.stayRegisterID=s.id
	LEFT OUTER JOIN passenger p ON st.passengerID=p.id
	LEFT OUTER JOIN attributedetails sa ON s.passengerTypeID=sa.id
	LEFT OUTER JOIN attributedetails pa ON p.passengerLevelID=pa.id
	LEFT OUTER JOIN attributedetails sb ON s.billUnitID=sb.id
	LEFT OUTER JOIN attributedetails sc ON s.rentOutTypeID=sc.id
	LEFT OUTER JOIN attributedetails sd ON s.payWayID=sd.id
	WHERE st.id=#{id,jdbcType=INTEGER}
  </select>
  
  <!--  根据 住宿登记id 来查询 押金 精简版 用于 转入团队， -->
   <select id="selectDepositJinJianBan" resultType="com.gx.po.StayRegisterPo">
      SELECT s.id,d.deposit	FROM stayregister s LEFT OUTER JOIN depoit d ON s.id=d.stayRegisterID
    WHERE s.id=#{id,jdbcType=INTEGER}
  </select>
  
  <!--   根据 住宿登记id 来查询 消费 精简版 用于 转入团队， -->
   <select id="selectConsumptionJinJianBan" resultType="com.gx.po.StayRegisterPo">
      SELECT s.id,c.consumptionMoney
    FROM stayregister s LEFT OUTER JOIN consumptiondetails c ON s.id=c.stayRegisterID
    WHERE s.id=#{id,jdbcType=INTEGER}
  </select>
  
  
  <!--   根据 住宿登记id 来查询 总费用 -->
   <select id="selectSumconst" resultType="com.gx.po.StayRegisterPo">
      SELECT s.* FROM stayregister s WHERE s.id=#{id,jdbcType=INTEGER}
  </select>
  
  
  
  
   <!--  修改转入团队或散客 -->
   <update id="changOverTeam" >
     UPDATE stayregister SET receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
     WHERE id = #{id,jdbcType=INTEGER}
   </update>
  
  
  
  
  
  
  
  
  
  
  
  
  <!--  修改 预定id-->
   <update id="updateStayRegisterPredetermineID" >
     UPDATE stayregister SET predetermineID=#{predetermineID}
     WHERE id = #{id}
   </update>
  
  
  
   
   
 
 
 
 
 
   
   
<!--    修改 -->
   <!-- <update id="updateById" parameterType="com.gx.po.StayRegisterPo">
      UPDATE room SET guestRoomLevelID=#{guestRoomLevelID,jdbcType=INTEGER},
			             roomStateID=#{roomStateID,jdbcType=INTEGER},
			             roomNumber=#{roomNumber,jdbcType=VARCHAR},
			             roomAmount=#{roomAmount,jdbcType=VARCHAR},
			             standardPriceDay=#{standardPriceDay,jdbcType=DOUBLE},
			             standardPrice=#{standardPrice,jdbcType=DOUBLE},
			             maxDuration=#{maxDuration,jdbcType=VARCHAR},
			             firstDuration=#{firstDuration,jdbcType=VARCHAR},
			             firstPrice=#{firstPrice,jdbcType=DOUBLE}
                   WHERE id = #{id,jdbcType=INTEGER}
   </update> -->
   
   <!-- <delete id="deleteById" parameterType="java.lang.Integer">
    DELETE FROM room WHERE id = #{id,jdbcType=INTEGER}
  </delete> -->
  
  
   <!--   分页条件查询 One -->
   <select id="pageFuzzyselectOne" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber,r.roomAmount,
    a.attributeDetailsName AS RoomGuestRoomLevelName, ss.id AS stayregisterdetailsId,
    aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
    ab.attributeDetailsName AS passengerTypeName,rt.teamName AS receiveTeamName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id 
    WHERE rt.targetTypeID=#{receiveTargeTypeID,jdbcType=INTEGER}
    AND s.isBillID=#{isBillID,jdbcType=INTEGER} 
    and r.roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
    ORDER BY s.registerTime DESC
    limit #{start},#{pageSize}
  </select>
  
  <!--   分页条件查询总行数 One -->
   <select id="countFuzzyselectOne" resultType="java.lang.Integer">
      SELECT count(*) FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE rt.targetTypeID=#{receiveTargeTypeID,jdbcType=INTEGER}
    AND s.isBillID=#{isBillID,jdbcType=INTEGER}
    and r.roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
    ORDER BY s.registerTime DESC 
  </select>
  
  
  <!--   分页条件查询 Two -->
   <select id="pageFuzzyselectTwo" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber,r.roomAmount,
    a.attributeDetailsName AS RoomGuestRoomLevelName, ss.id AS stayregisterdetailsId,
    aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
    ab.attributeDetailsName AS passengerTypeName,rt.teamName AS receiveTeamName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=#{isBillID,jdbcType=INTEGER} 
    and r.roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
    ORDER BY s.registerTime DESC
    limit #{start},#{pageSize}
  </select>
  
  <!--   分页条件查询总行数 Two -->
   <select id="countFuzzyselectTwo" resultType="java.lang.Integer">
      SELECT count(*) FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.receiveTargetID=#{receiveTargetID,jdbcType=INTEGER}
    AND s.isBillID=#{isBillID,jdbcType=INTEGER}
    and r.roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
    ORDER BY s.registerTime DESC 
  </select>
  
  <!--   分页条件查询 Three -->
   <select id="pageFuzzyselectThree" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber,r.roomAmount,
    a.attributeDetailsName AS RoomGuestRoomLevelName, ss.id AS stayregisterdetailsId,
    aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
    ab.attributeDetailsName AS passengerTypeName,rt.teamName AS receiveTeamName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.receiveTargetID!=2
    AND s.isBillID=#{isBillID,jdbcType=INTEGER} 
    and r.roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
    ORDER BY s.registerTime DESC
    limit #{start},#{pageSize}
  </select>
  
  <!--   分页条件查询总行数 Three -->
   <select id="countFuzzyselectThree" resultType="java.lang.Integer">
      SELECT count(*) FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.receiveTargetID!=2
    AND s.isBillID=#{isBillID,jdbcType=INTEGER}
    and r.roomNumber like CONCAT('%',#{roomNumber,jdbcType=VARCHAR},'%')
    ORDER BY s.registerTime DESC 
  </select>
  
  
  
  
  
  
  
  
  
  
  <!-- FinancialStatistics -->
  
  <!--   分页条件查询 Four -->
   <select id="pageFuzzyselectFour" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber,r.roomAmount,
    a.attributeDetailsName AS RoomGuestRoomLevelName, ss.id AS stayregisterdetailsId,
    aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
    ab.attributeDetailsName AS passengerTypeName,rt.teamName AS receiveTeamName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.isBillID=69 ORDER BY s.registerTime DESC
    limit #{start},#{pageSize}
  </select>
  
  <!--   分页条件查询总行数 Four -->
   <select id="countFuzzyselectFour" resultType="java.lang.Integer">
      SELECT count(*) FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.isBillID=69 ORDER BY s.registerTime DESC 
  </select>
  
  <!--   分页条件查询 Five -->
   <select id="pageFuzzyselectFive" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,p.name AS passengerName,r.roomNumber,r.roomAmount,
    a.attributeDetailsName AS RoomGuestRoomLevelName, ss.id AS stayregisterdetailsId,
    aa.attributeDetailsName AS predetermineReceiveTargeTypeName,
    ab.attributeDetailsName AS passengerTypeName,rt.teamName AS receiveTeamName
	FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.isBillID=69 AND s.payTime BETWEEN #{min} AND #{max} ORDER BY s.registerTime DESC
    limit #{start},#{pageSize}
  </select>
  
  <!--   分页条件查询总行数 Five -->
   <select id="countFuzzyselectFive" resultType="java.lang.Integer">
      SELECT count(*) FROM stayregister s LEFT OUTER JOIN stayregisterdetails ss ON s.id=ss.stayRegisterID 
	LEFT OUTER JOIN passenger p ON ss.passengerID = p.id
	INNER JOIN room r ON s.roomID=r.id INNER JOIN attributedetails a ON r.guestRoomLevelID=a.id 
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id 
	LEFT OUTER JOIN attributedetails aa ON rt.targetTypeID= aa.id
	LEFT OUTER JOIN attributedetails ab ON s.passengerTypeID=ab.id
    WHERE s.isBillID=69 AND s.payTime BETWEEN #{min} AND #{max} ORDER BY s.registerTime DESC
  </select>
  
  
  <!--  根据 已结账 来查询 总费用 精简版条件 无条件， -->
   <select id="selectPayJingJianBanNot" resultType="com.gx.po.StayRegisterPo">
      SELECT s.* FROM stayregister s WHERE s.isBillID=69
  </select>
  
  <!--  根据 已结账 来查询 住店人数。无条件， -->
   <select id="selectPayStayNumberNot" resultType="com.gx.po.StayRegisterPo">
       SELECT	s.* FROM stayregister s 
	LEFT OUTER JOIN stayregisterdetails sd ON s.id=sd.stayRegisterID
	LEFT OUTER JOIN passenger p ON sd.passengerID=p.id
	WHERE s.isBillID=69
  </select>
  
  <!--   根据 已结账 来查询 旅客总消费。无条件， -->
   <select id="selectPayXiaoFeiNot" resultType="com.gx.po.StayRegisterPo">
      SELECT s.id,c.consumptionMoney
    FROM stayregister s LEFT OUTER JOIN consumptiondetails c ON s.id=c.stayRegisterID
    WHERE s.isBillID=69
  </select>
  
  
  
  <!--  根据 已结账 来查询 总费用 精简版条件 结账区段， -->
   <select id="selectPayJingJianBan" resultType="com.gx.po.StayRegisterPo">
      SELECT s.* FROM stayregister s 
      WHERE s.isBillID=69 AND s.payTime BETWEEN #{min} AND #{max}
  </select>
  
  <!--  根据 已结账 来查询 住店人数。条件 结账区段， -->
   <select id="selectPayStayNumber" resultType="com.gx.po.StayRegisterPo">
       SELECT	s.* FROM stayregister s 
	LEFT OUTER JOIN stayregisterdetails sd ON s.id=sd.stayRegisterID
	LEFT OUTER JOIN passenger p ON sd.passengerID=p.id
	WHERE s.isBillID=69 AND s.payTime BETWEEN #{min} AND #{max}
  </select>
  
  <!--   根据 已结账 来查询 旅客总消费。条件 结账区段， -->
   <select id="selectPayXiaoFei" resultType="com.gx.po.StayRegisterPo">
      SELECT s.id,c.consumptionMoney
    FROM stayregister s LEFT OUTER JOIN consumptiondetails c ON s.id=c.stayRegisterID
    WHERE s.isBillID=69 AND s.payTime BETWEEN #{min} AND #{max}
  </select>
  
  
  <!--   根据 id 查询 很多很多的信息 -->
   <select id="selectAllInformation" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.roomNumber,r.standardPriceDay AS roomStandardPriceDay,
	r.standardPrice AS roomStandardPrice,r.firstPrice AS roomFirstPrice,
	se.attributeDetailsName AS roomGuestRoomLevelName,
	rt.teamName AS receiveTeamName,rt.teamCode AS receiveTeamCode,
	rt.principal AS receivePrincipal,rt.contactPhoneNUmber AS receiveContactPhoneNUmber,
	p.name AS passengerName,sg.attributeDetailsName AS passengerGenderName,
	p.papersNumber AS passengerPapersNumber,p.contactPhoneNumber AS pssengerContactPhoneNumber,
	sa.attributeDetailsName AS passengerTypeName,sf.attributeDetailsName AS passengerPapersName,
	pa.attributeDetailsName AS passengerLevelName,sb.attributeDetailsName AS billUnitName,
	sc.attributeDetailsName AS rentOutTypeName,sd.attributeDetailsName AS payWayName,
	ydp.name AS predeterminePassengerName, ydp.papersNumber AS predeterminePassengerPapersNumber,
	ydp.contactPhoneNumber AS predeterminePassengerContactPhoneNumber
	FROM stayregister s LEFT OUTER JOIN room r ON s.roomID=r.id
	LEFT OUTER JOIN receivetarget rt ON s.receiveTargetID=rt.id
	LEFT OUTER JOIN stayregisterdetails st ON st.stayRegisterID=s.id
	LEFT OUTER JOIN passenger p ON st.passengerID=p.id
	LEFT OUTER JOIN attributedetails sa ON s.passengerTypeID=sa.id
	LEFT OUTER JOIN attributedetails pa ON p.passengerLevelID=pa.id
	LEFT OUTER JOIN attributedetails sb ON s.billUnitID=sb.id
	LEFT OUTER JOIN attributedetails sc ON s.rentOutTypeID=sc.id
	LEFT OUTER JOIN attributedetails sd ON s.payWayID=sd.id
	LEFT OUTER JOIN attributedetails se ON r.guestRoomLevelID=se.id
	LEFT OUTER JOIN predetermine yd ON yd.id=s.predetermineID
	LEFT OUTER JOIN passenger ydp ON yd.passengerID=ydp.id
	LEFT OUTER JOIN attributedetails sf ON sf.id=p.papersID
	LEFT OUTER JOIN attributedetails sg ON p.genderID=sg.id
	WHERE st.id=#{id,jdbcType=INTEGER}
  </select>
  
  
   <select id="selectXiaoFeiMingXi" resultType="com.gx.po.StayRegisterPo">
      SELECT s.*,r.roomNumber,cpd.id AS consumptionId,cpd.consumptionNumber,cpd.consumptionMoney,
	cpd.consumptionTime,c.commodityName,c.salePrice AS commoditySalePrice,
	a.attributeDetailsName AS commodityUOMName,b.attributeDetailsName AS commodityTypeName
	FROM stayregister s INNER JOIN room r ON s.roomID=r.id
	LEFT OUTER JOIN consumptiondetails cpd ON s.id=cpd.stayRegisterID
	LEFT OUTER JOIN commodity c ON cpd.commodityID=c.id
	LEFT OUTER JOIN attributedetails a ON c.uOMID=a.id
    LEFT OUTER JOIN attributedetails b ON c.commodityTypeID=b.id
	WHERE s.id=#{id,jdbcType=INTEGER}
  </select>

          
</mapper>